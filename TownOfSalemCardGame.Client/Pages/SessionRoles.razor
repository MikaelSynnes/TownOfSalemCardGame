@page "/session-roles"
@using TownOfSalemCardGame.Shared
@using TownOfSalemCardGame.Client.Shared
@inject SessionState SessionState
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Player Roles</h3>
@if (SessionState.PlayerAssignments == null || SessionState.PlayerAssignments.Count == 0)
{
    <div class="alert alert-warning">No assignments to display.</div>
}
else
{
    <table class="table table-bordered mt-2">
        <thead>
            <tr>
                <th>Player</th>
                <th>Role</th>
                <th>Description</th>
                <th>States</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var assignment in SessionState.PlayerAssignments)
            {
                <tr>
                    <td>@assignment.Player</td>
                    <td>@assignment.Role?.Name</td>
                    <td>@assignment.Role?.Description</td>
                    <td>
                        @if (assignment.States != null && assignment.States.Count > 0)
                        {
                            @foreach (var state in assignment.States)
                            {
                                var color = StateOptions.FirstOrDefault(opt => opt.State == state).Color ?? "secondary";
                                <span class="badge bg-@color me-1">@state</span>
                            }
                        }
                        else
                        {
                            <span class="text-muted">None</span>
                        }
                    </td>
                    <td>
                        @foreach (var (state, color) in StateOptions)
                        {
                            <button class="btn btn-sm @(assignment.States.Contains(state) ? $"btn-{color}" : "btn-outline-" + color) me-1" @onclick="() => ToggleState(assignment, state)">@state</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private static readonly (string State, string Color)[] StateOptions = new[] {
        ("Alive", "success"),
        ("Dead", "danger"),
        ("Muted", "secondary"),
        ("Protected", "info"),
        ("Saved", "warning")
    };

    protected override async Task OnInitializedAsync()
    {
        var sessionId = await JS.InvokeAsync<string>("sessionCookie.get", "SessionId");
        if (!string.IsNullOrEmpty(sessionId))
        {
            var assignments = await Http.GetFromJsonAsync<List<TownOfSalemCardGame.Shared.PlayerRoleAssignment>>($"api/session/assignments/{sessionId}");
            // Always set, even if empty
            SessionState.PlayerAssignments = assignments ?? new List<TownOfSalemCardGame.Shared.PlayerRoleAssignment>();
        }
        // Set Alive by default for all assignments that have no state
        if (SessionState.PlayerAssignments != null)
        {
            foreach (var assignment in SessionState.PlayerAssignments)
            {
                if (assignment.States == null || assignment.States.Count == 0)
                {
                    assignment.States = new HashSet<string> { "Alive" };
                }
            }
        }
    }

    private void ToggleState(TownOfSalemCardGame.Shared.PlayerRoleAssignment assignment, string state)
    {
        if (assignment.States == null)
            assignment.States = new HashSet<string>();
        bool changed = false;
        if (state == "Alive")
        {
            if (!assignment.States.Contains("Alive")) changed = true;
            assignment.States.Remove("Dead");
            changed |= assignment.States.Add("Alive");
        }
        else if (state == "Dead")
        {
            if (!assignment.States.Contains("Dead")) changed = true;
            assignment.States.Remove("Alive");
            changed |= assignment.States.Add("Dead");
        }
        else
        {
            if (assignment.States.Contains(state))
            {
                assignment.States.Remove(state);
                changed = true;
            }
            else
            {
                assignment.States.Add(state);
                changed = true;
            }
        }
        if (changed)
        {
            assignment.States = new HashSet<string>(assignment.States);
            StateHasChanged();
        }
    }
}
